"use strict";(()=>{var e={};e.id=853,e.ids=[853],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},1332:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>D,patchFetch:()=>h,requestAsyncStorage:()=>u,routeModule:()=>p,serverHooks:()=>y,staticGenerationAsyncStorage:()=>m});var s={};a.r(s),a.d(s,{GET:()=>l,runtime:()=>c});var i=a(9303),r=a(8716),n=a(670),o=a(7070),d=a(6189);let c="nodejs";async function l(){try{let e=(0,d.getDbPool)();if(!e)return o.NextResponse.json({success:!1,error:"SQLite database not initialized"},{status:500});return await e.execute("SELECT 1"),o.NextResponse.json({success:!0,message:"Database connection is working"})}catch(e){return o.NextResponse.json({success:!1,error:e.message},{status:500})}}let p=new i.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/test-connection/route",pathname:"/test-connection",filename:"route",bundlePath:"app/test-connection/route"},resolvedPagePath:"/Users/devang/Desktop/sql_tutor/app/test-connection/route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:u,staticGenerationAsyncStorage:m,serverHooks:y}=p,D="/test-connection/route";function h(){return(0,n.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:m})}},6610:(e,t,a)=>{let{PrismaClient:s}=a(3524);class i{constructor(){this.initialized=!1,this.prisma=new s,console.log("\uD83D\uDDC4️  Initializing Prisma Postgres database...")}async initialize(){try{if(this.initialized)return;await this.createTables(),await this.insertSampleData(),this.initialized=!0,console.log("✅ Prisma Postgres database initialized with sample data")}catch(e){throw console.error("❌ Prisma Postgres database initialization failed:",e),e}}async createTables(){try{await this.prisma.$connect(),console.log("✅ Connected to Prisma database")}catch(e){throw console.error("❌ Failed to connect to Prisma database:",e),e}}async insertSampleData(){try{if(await this.prisma.department.count()>0){console.log("Sample data already exists, skipping insertion");return}for(let e of[{id:1,name:"Engineering",managerId:1},{id:2,name:"Marketing",managerId:2},{id:3,name:"Sales",managerId:3},{id:4,name:"HR",managerId:4}])await this.prisma.department.upsert({where:{id:e.id},update:e,create:e});for(let e of[{id:1,name:"John Doe",departmentId:1,salary:75e3,hireDate:new Date("2020-01-15")},{id:2,name:"Jane Smith",departmentId:2,salary:65e3,hireDate:new Date("2019-03-22")},{id:3,name:"Mike Johnson",departmentId:1,salary:8e4,hireDate:new Date("2021-06-10")},{id:4,name:"Sarah Wilson",departmentId:3,salary:55e3,hireDate:new Date("2022-02-01")},{id:5,name:"David Brown",departmentId:1,salary:7e4,hireDate:new Date("2020-09-15")},{id:6,name:"Lisa Davis",departmentId:2,salary:6e4,hireDate:new Date("2021-11-30")},{id:7,name:"Tom Anderson",departmentId:4,salary:5e4,hireDate:new Date("2023-01-20")},{id:8,name:"Emily White",departmentId:3,salary:58e3,hireDate:new Date("2022-08-15")}])await this.prisma.employee.upsert({where:{id:e.id},update:e,create:e});for(let e of[{id:1,name:"Website Redesign",budget:1e5,startDate:new Date("2023-01-01"),endDate:new Date("2023-06-30")},{id:2,name:"Mobile App",budget:15e4,startDate:new Date("2023-03-15"),endDate:new Date("2023-12-31")},{id:3,name:"Database Migration",budget:8e4,startDate:new Date("2023-02-01"),endDate:new Date("2023-08-31")}])await this.prisma.project.upsert({where:{id:e.id},update:e,create:e});for(let e of[{employeeId:1,projectId:1,role:"Lead Developer"},{employeeId:3,projectId:1,role:"Frontend Developer"},{employeeId:5,projectId:2,role:"Backend Developer"},{employeeId:1,projectId:3,role:"Database Architect"},{employeeId:2,projectId:1,role:"UI/UX Designer"}])await this.prisma.employeeProject.upsert({where:{employeeId_projectId:{employeeId:e.employeeId,projectId:e.projectId}},update:e,create:e});for(let e of[{id:1,num:1},{id:2,num:1},{id:3,num:1},{id:4,num:2},{id:5,num:1},{id:6,num:2},{id:7,num:2}])await this.prisma.log.upsert({where:{id:e.id},update:e,create:e});for(let e of[{id:1,recordDate:new Date("2015-01-01"),temperature:10},{id:2,recordDate:new Date("2015-01-02"),temperature:25},{id:3,recordDate:new Date("2015-01-03"),temperature:20},{id:4,recordDate:new Date("2015-01-04"),temperature:30}])await this.prisma.weather.upsert({where:{id:e.id},update:e,create:e});for(let e of[{userId:1,sessionId:1,activityDate:new Date("2019-07-20"),activityType:"open_session"},{userId:1,sessionId:1,activityDate:new Date("2019-07-20"),activityType:"scroll_down"},{userId:1,sessionId:1,activityDate:new Date("2019-07-20"),activityType:"end_session"},{userId:1,sessionId:2,activityDate:new Date("2019-07-21"),activityType:"open_session"},{userId:1,sessionId:2,activityDate:new Date("2019-07-21"),activityType:"send_message"},{userId:1,sessionId:2,activityDate:new Date("2019-07-21"),activityType:"end_session"},{userId:2,sessionId:4,activityDate:new Date("2019-07-21"),activityType:"open_session"},{userId:2,sessionId:4,activityDate:new Date("2019-07-21"),activityType:"send_message"},{userId:2,sessionId:4,activityDate:new Date("2019-07-21"),activityType:"end_session"},{userId:3,sessionId:5,activityDate:new Date("2019-07-22"),activityType:"open_session"},{userId:3,sessionId:5,activityDate:new Date("2019-07-22"),activityType:"send_message"},{userId:3,sessionId:5,activityDate:new Date("2019-07-22"),activityType:"end_session"}])await this.prisma.activity.upsert({where:{userId_sessionId_activityDate:{userId:e.userId,sessionId:e.sessionId,activityDate:e.activityDate}},update:e,create:e});console.log("✅ Sample data inserted successfully")}catch(e){throw console.error("❌ Failed to insert sample data:",e),e}}async executeQuery(e,t=[]){try{await this.initialize();let a=e.toLowerCase().trim();if(a.includes("select 1")||a.includes("select 1 as test"))return[[{test:1}]];if(a.startsWith("show tables"))return[await this.prisma.$queryRaw`
                    SELECT table_name as "Tables_in_sqlite_db"
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                `];if(a.startsWith("describe")||a.startsWith("desc ")){let e=a.match(/describe\s+(\w+)|desc\s+(\w+)/i);if(e){let t=e[1]||e[2];return[await this.getTableSchema(t)]}return[[]]}let s=e;if(t&&t.length>0&&t.forEach((e,t)=>{let a=`$${t+1}`;s=s.replace("?",a)}),a.startsWith("select"))return[(t&&t.length>0?await this.prisma.$queryRawUnsafe(s,...t):await this.prisma.$queryRawUnsafe(s)).map(e=>{let t={};for(let[a,s]of Object.entries(e))"bigint"==typeof s?t[a]=Number(s):t[a]=s;return t})];if(t&&t.length>0)return[{affectedRows:await this.prisma.$executeRawUnsafe(s,...t)||0,insertId:null}];return[{affectedRows:await this.prisma.$executeRawUnsafe(s)||0,insertId:null}]}catch(e){throw Error(`Prisma Postgres Error: ${e.message}`)}}async getTableSchema(e){try{return await this.prisma.$queryRaw`
                SELECT 
                    column_name as "Field",
                    data_type as "Type",
                    is_nullable as "Null",
                    CASE 
                        WHEN constraint_name LIKE '%_pkey' THEN 'PRI'
                        ELSE ''
                    END as "Key",
                    column_default as "Default",
                    '' as "Extra"
                FROM information_schema.columns 
                WHERE table_name = ${e}
                AND table_schema = 'public'
                ORDER BY ordinal_position
            `}catch(e){return console.error("Error getting table schema:",e),[]}}createPool(){return{execute:async(e,t=[])=>this.executeQuery(e,t),getConnection:async()=>({ping:async()=>Promise.resolve(),release:()=>Promise.resolve(),execute:async(e,t=[])=>this.executeQuery(e,t)})}}async disconnect(){await this.prisma.$disconnect()}}let r=new i;e.exports={createPool:e=>r.createPool(e),createConnection:e=>r.createPool(e),disconnect:()=>r.disconnect()}},6189:(e,t,a)=>{let s=null;e.exports={getDbPool:function(){return s||(s=a(6610).createPool())}}}};var t=require("../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),s=t.X(0,[276,972],()=>a(1332));module.exports=s})();